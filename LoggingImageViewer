 1  package logging;
 2
 3  import java.awt.*;
 4  import java.awt.event.*;
 5  import java.io.*;
 6  import java.util.logging.*;
 7  import javax.swing.*;
 8
 9  /**
10   * A modification of the image viewer program that logs various events.
11   * @version 1.03 2015-08-20
12   * @author Cay Horstmann
13   */
14  public class LoggingImageViewer
15  {
16     public static void main(String[] args)
17     {
18        if (System.getProperty("java.util.logging.config.class") == null
19              && System.getProperty("java.util.logging.config.file") == null)
20        {
21           try
22           {
23              Logger.getLogger("com.horstmann.corejava").setLevel(Level.ALL);
24              final int LOG_ROTATION_COUNT = 10;
25              var handler = new FileHandler("%h/LoggingImageViewer.log", 0, LOG_ROTATION_COUNT);
26              Logger.getLogger("com.horstmann.corejava").addHandler(handler);
27           }
28           catch (IOException e)
29           {
30              Logger.getLogger("com.horstmann.corejava").log(Level.SEVERE,
31                 "Can't create log file handler", e);
32           }
33        }
34
35        EventQueue.invokeLater(() ->
36              {
37                 var windowHandler = new WindowHandler();
38                 windowHandler.setLevel(Level.ALL);
39                 Logger.getLogger("com.horstmann.corejava").addHandler(windowHandler);
40
41                 var frame = new ImageViewerFrame();
42                 frame.setTitle("LoggingImageViewer");
43                 frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
44 
45                 Logger.getLogger("com.horstmann.corejava").fine("Showing frame");
46                 frame.setVisible(true);
47              });
48     }
49  }
50
51  /**
52   * The frame that shows the image.
53   */
54  class ImageViewerFrame extends JFrame
55  {
56     private static final int DEFAULT_WIDTH = 300;
57     private static final int DEFAULT_HEIGHT = 400;   
58
59     private JLabel label;
60     private static Logger logger = Logger.getLogger("com.horstmann.corejava");
61
62     public ImageViewerFrame()
63     {
64        logger.entering("ImageViewerFrame", "<init>");      
65        setSize(DEFAULT_WIDTH, DEFAULT_HEIGHT);
66
67        // set up menu bar
68        var menuBar = new JMenuBar();
69        setJMenuBar(menuBar);
70
71        var menu = new JMenu("File");
72        menuBar.add(menu);
73
74        var openItem = new JMenuItem("Open");
75        menu.add(openItem);
76        openItem.addActionListener(new FileOpenListener());
77
78        var exitItem = new JMenuItem("Exit");
79        menu.add(exitItem);
80        exitItem.addActionListener(new ActionListener()
81           {
82              public void actionPerformed(ActionEvent event)
83              {
84                 logger.fine("Exiting.");
85                 System.exit(0);
86              }
87           });
88
89        // use a label to display the images
90        label = new JLabel();
91        add(label);
92        logger.exiting("ImageViewerFrame", "<init>");
93     }
94
95     private class FileOpenListener implements ActionListener
96     {
97        public void actionPerformed(ActionEvent event)
98        {
99           logger.entering("ImageViewerFrame.FileOpenListener", "actionPerformed", event);
100
101          // set up file chooser
102          var chooser = new JFileChooser();
103          chooser.setCurrentDirectory(new File("."));
104
105          // accept all files ending with .gif
106          chooser.setFileFilter(new javax.swing.filechooser.FileFilter()
107             {
108                public boolean accept(File f)
109                {
110                   return f.getName().toLowerCase().endsWith(".gif") || f.isDirectory();
111                }
112
113                public String getDescription()
114                {
115                   return "GIF Images";
116                }
117             });
118
119          // show file chooser dialog
120          int r = chooser.showOpenDialog(ImageViewerFrame.this);
121
122          // if image file accepted, set it as icon of the label
123          if (r == JFileChooser.APPROVE_OPTION)
124          {
125             String name = chooser.getSelectedFile().getPath();
126             logger.log(Level.FINE, "Reading file {0}", name);
127             label.setIcon(new ImageIcon(name));
128          }
129          else logger.fine("File open dialog canceled.");
130          logger.exiting("ImageViewerFrame.FileOpenListener", "actionPerformed");
131       }
132    }
133 }
134
135 /**
136  * A handler for displaying log records in a window.
137  */
138 class WindowHandler extends StreamHandler
139 {
140    private JFrame frame;
141
142    public WindowHandler()
143    {
144       frame = new JFrame();
145       var output = new JTextArea();
146       output.setEditable(false);
147       frame.setSize(200, 200);
148       frame.add(new JScrollPane(output));
149       frame.setFocusableWindowState(false);
150       frame.setVisible(true);
151       setOutputStream(new OutputStream()
152          {
153             public void write(int b)
154             {
155             } // not called
156
157             public void write(byte[] b, int off, int len)
158             {
159                output.append(new String(b, off, len));
160             }
161          });
162    }
163
164    public void publish(LogRecord record)
165    {
166       if (!frame.isVisible()) return;
167       super.publish(record);
168       flush();
169    }
170 }